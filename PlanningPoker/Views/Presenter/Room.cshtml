@model string

@{
    ViewBag.Title = "Planning Poker";
}

<nav class="navbar navbar-default">
    <div class="container">
        <div class="navbar-header">
            <a class="navbar-brand" href="#">Room @Model</span></a>
        </div>
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav navbar-right">
                <li><a href="#" data-bind="click: nextHand">Next Hand</a></li>
            </ul>
        </div>
    </div>
</nav>

<div data-bind="foreach: players">
    <section class="hand" data-bind="css: { pick: picked, flip: $root.flip }">
        <div class="card">
            <figure class="front"></figure>
        </div><div class="card">
            <figure class="front"></figure>
        </div><div class="card">
            <figure class="front"></figure>
            <figure class="back" data-bind="html: formattedCard"></figure>
        </div><div class="card">
            <figure class="front"></figure>
        </div><div class="card">
            <figure class="front"></figure>
        </div>
        <div class="name" data-bind="text: name"></div>
    </section>
</div>

@section scripts {
    <script src="~/Scripts/room.js"></script>
    <script src="~/Scripts/knockout-3.4.0.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <script src="~/signalr/hubs"></script>
    
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var pokerHubProxy = $.connection.pokerHub;
            // Create a function that the hub can call back to display messages.
            pokerHubProxy.state.room = "@Model";

            ko.applyBindings(new RoomViewModel(pokerHubProxy));

            $.connection.hub.start().done(function () {
                pokerHubProxy.server.createRoom();
            });

            function RoomViewModel(pokerHubProxy) {
                var self = this;

                self.players = ko.observableArray([]);
                
                self.reset = function () {
                    $('.hand').removeClass('flip').removeClass('pick');
                    for (var i = 0; i < self.players().length; i++) {
                        self.players()[i].card("");
                    }
                }

                self.findByConnectionId = function (connectionId) {
                    for (var i = 0; i < self.players().length; i++) {
                        if (self.players()[i].connectionId == connectionId) {
                            return self.players()[i];
                        }
                    }
                    return undefined;
                }

                self.haveAllPicked = function () {
                    for (var i = 0; i < self.players().length; i++) {
                        if (!self.players()[i].picked()) {
                            return false;
                        }
                    }
                    return true;
                };

                self.flip = ko.observable(false);

                self.nextHand = function () {
                    pokerHubProxy.server.nextHand();
                }

                pokerHubProxy.client.picked = function (name, connectionId, card) {
                    var player = self.findByConnectionId(connectionId)
                    
                    if (!player) {
                        player = new Player(name, connectionId);
                        self.players.push(player);
                    }

                    player.card(card);

                    if (self.haveAllPicked()) {
                        setTimeout(function () { if (self.haveAllPicked()) self.flip(true); }, 2000);
                    }
                    else {
                        self.flip(false);
                    }
                };
            }

            function Player(name, connectionId) {
                var self = this;
                self.name = name;
                self.connectionId = connectionId;
                self.card = ko.observable("");
                self.formattedCard = ko.pureComputed(function () {
                    if (self.card() == "c") return '<span class="glyphicon glyphicon-glass" aria-hidden="true"></span>';
                    return self.card();
                }, self);

                self.picked = ko.pureComputed(function () {
                    return self.card() != "";
                }, self);
            }

        });

    </script>
}
